version: 2.1

workflows:
  build_and_deploy:
    jobs:
      - build_number
      - create_lambda_zip      
      - deploy_lambda_zip:
        requires:
          - create_lambda_zip
      - smoke_test:
        requires:
          - deploy_lambda_zip
        

jobs:
  build_number:
    docker: 
      - image: alpine
        environment: 
          ENV: DEV
    steps:
      - run:
          name: build_numbern
          command: echo "build_number is ${CIRCLE_BUILD_NUM}"

  create_lambda_zip:
    docker: 
      - image: circleci/python:3.7.1
        environment: 
          ENV: DEV
    steps:
      - checkout
      - run:
          name: create the zip file
          command: echo "Zip file created"
  
  deploy_lambda_zip:
    docker:
      - image: alpine
    steps:
      - run: echo "deploy zip file"

  smoke_test:
    docker:
      - image: alpine
    steps:
      - run: echo "Smoke test"



  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports